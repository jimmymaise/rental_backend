scalar Upload

enum FileUsingLocate {
  ItemPreviewImage
  UserAvatarImage
  UserCoverImage
  OrgAvatarImage
  RentingOrderItemImage
  RentingDepositItemImage
  RentingOrderActivityImage
  BookingActivityImage
}

input PublicStorageFileInput {
  id: String!
  url: String!
  imageSizes: [String]
  isUploadField: Boolean
  isPublicFile: Boolean
}

input FileSizeMapInput {
  original: Int
  small: Int
  medium: Int
  large: Int
}

input PreSignedUrlFileInput {
  name: String!
  contentType: String!
  cloudName: String
  includes: [String]
  fileSizeMap: FileSizeMapInput
  usingLocate: FileUsingLocate
}

input RequestUploadFileDataInput {
  name: String!
  contentType: String!
  size: Float!
  usingLocate: FileUsingLocate!
}

type PreSignedUrlImageData {
  id: String!
  preSignedUrl: String
  mediumPreSignedUrl: String
  smallPreSignedUrl: String
  imageUrl: String
}

type RequestUploadFileData {
  id: String!
  preSignedUrl: String
  url: String
}

type PublicStorageFile {
  id: String
  url: String
  signedUrl: String
}

type StorageFile {
  id: String!
  url: String!
  name: String
  bucketName: String
  folderName: String
  contentType: String
}

type Query {
  generatePublicUrl(url: String!): String
}

# uploadItemImage(file: Upload!): StorageFile!
type Mutation {
  generateImageFile(imageData: PreSignedUrlFileInput!): PreSignedUrlImageData!
  deleteFileForListingItem(fileId: String!): String!
  requestUploadFile(
    fileData: RequestUploadFileDataInput!
  ): RequestUploadFileData!
}
