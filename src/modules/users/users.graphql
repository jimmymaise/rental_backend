scalar JSON


type UserSummary {
  id: ID!
  email: String
  currentOrgId: String
  userInfo: DBUserInfo
}

type DBUserInfo {
  displayName: String
  bio: String
  avatarImage: PublicStorageFile
  coverImage: PublicStorageFile
  phoneNumber: String
  createdDate: Float
  userId: String
}

type UserInfo {
  id: ID!
  currentOrgId: String
  orgIds: [String]
  displayName: String
  bio: String
  currentOrgDetail: OrgSummaryCache
  orgDetails: [OrgSummaryCache]
  avatarImage: PublicStorageFile
  coverImage: PublicStorageFile
  phoneNumber: String
  authPhoneNumber: String
  email: String
  createdDate: Float
  lastSignedIn: Float
}

type UserPagination {
  items: [UserInfo]
  total: Int
  limit: Int
  offset: Int
}
type UserSummaryPagination {
  items: [UserSummary]
  total: Int
  limit: Int
  offset: Int
}

type PublicUserInfo {
  id: ID!
  email: String
  displayName: String
  currentOrgId: String
  orgIds: [String]
  bio: String
  avatarImage: PublicStorageFile
  coverImage: PublicStorageFile
  phoneNumber: String
  permissions: [String]
}

input UserInfoInput {
  displayName: String
  bio: String
  avatarImage: PublicStorageFileInput
  coverImage: PublicStorageFileInput
  phoneNumber: String
  email: String
}

input UserQuery {
  search: String
  offset: Int
  limit: Int
  sortByFields: [String]
}

type AuthPayload {
  accessToken: String
  refreshToken: String
  user: UserAuth
}

type UserAuth {
  id: ID!
  email: String!
  currentOrgId: String
}

type Query {
  whoAmI: UserInfo
  userPublicProfile(userId: String!): PublicUserInfo
  adminUserListFeed(query: UserQuery): UserPagination
  findUserInfoByEmailPhoneNumber(searchValue: String!): [PublicUserInfo]
}

type Mutation {
  updateUserInfoData(userInfoData: UserInfoInput!): UserInfo
  signUpByEmail(email: String!, password: String!): AuthPayload
  loginByEmail(email: String!, password: String!): AuthPayload
  logout: Boolean
  refreshUserAccessToken(refresh: String): AuthPayload
  requestResetPassword(email: String!, recaptchaKey: String!): String
  setPasswordByToken(token: String!, password: String!): String
  changePassword(currentPassword: String!, newPassword: String!): AuthPayload
  deleteMyUser(reason: String, recaptchaKey: String!): Boolean
}
