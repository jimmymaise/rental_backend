// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["orderByRelation"]
}

model Organization {
  id                      String                   @id @default(uuid())
  name                    String?
  description             String?
  avatarImage             Json?
  slug                    String?                  @unique
  createdDate             DateTime?                @default(now())
  updatedDate             DateTime?                @updatedAt
  rolesThisOrgHaving      Role[]
  createdByUser           User?                    @relation("CreatedByUser", fields: [createdBy], references: [id])
  createdBy               String?
  employees               Employee[]
  customers               Customer[]
  items                   Item[]                   @relation("ItemBelongToOrg")
  sellingOrder            SellingOrder[]           @relation("SellingOrderBelongToOrg")
  rentingOrderItems       RentingOrderItem[]       @relation("SellingOrderItemBelongToOrg")
  rentingDepositItems     RentingDepositItem[]     @relation("RentingDepositItemBelongToOrg")
  commonAttributesConfigs CommonAttributesConfig[] @relation("CommonAttributesConfigBelongToOrg")
}

model Employee {
  id           String       @id @default(uuid())
  user         User         @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [orgId], references: [id])
  userId       String
  orgId        String
  isOwner      Boolean      @default(false)
  createdDate  DateTime?    @default(now())
  updatedDate  DateTime?    @updatedAt

  @@unique([userId, orgId])
}

model Customer {
  id           String       @id @default(uuid())
  user         User         @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [orgId], references: [id])
  userId       String
  orgId        String
  createdDate  DateTime?    @default(now())
  updatedDate  DateTime?    @updatedAt

  @@unique([userId, orgId])
}

model User {
  id                           String               @id @default(uuid())
  email                        String?              @unique
  currentOrgId                 String?
  phoneNumber                  String?              @unique
  passwordHash                 String?
  currentHashedRefreshToken    String?              @unique
  facebookId                   String?              @unique
  facebookAccessToken          String?
  googleId                     String?              @unique
  googleAccessToken            String?
  isEmailVerified              Boolean              @default(false)
  resetPasswordToken           String?
  verifyEmailToken             String?
  verifyPhoneToken             String?
  userInfo                     UserInfo?
  lastSignedIn                 DateTime             @default(now())
  isBlocked                    Boolean?             @default(false)
  isDeleted                    Boolean?             @default(false)
  systemNote                   String?
  orgsThisUserCreate           Organization[]       @relation("CreatedByUser")
  employeesThisUserBecome      Employee[]
  customersThisUserBecome      Customer[]
  ownerItemReview              ItemReview[]         @relation("OwnerItemReview")
  ownerUserRentingItemRequest  RentingItemRequest[] @relation("OwnerRequest")
  lenderUserRentingItemRequest RentingItemRequest[] @relation("LenderOfRequest")
  reviewFromUser               UserReview[]         @relation("OwnerUserReview")
  reviewToUser                 UserReview[]         @relation("ToUserReview")
  item                         Item[]
  myUserContact                MyUserContact[]
  userNotifications            UserNotification[]   @relation("ForUserNotification")
  roles                        Role[]
  sellingOrders                SellingOrder[]       @relation("SellingOrderBelongToCustomer")
  rentingOrderItems            RentingOrderItem[]   @relation("RentingOrderItemBelongToCustomer")

  rentingDepositItems RentingDepositItem[] @relation("RentingDepositItemBelongToCustomer")
}

model Role {
  id          String       @id @default(uuid())
  name        String
  description String?
  org         Organization @relation(fields: [orgId], references: [id])
  orgId       String
  isDefault   Boolean      @default(false)
  users       User[]
  permissions Permission[]
  order       Int?         @default(0)
  createdDate DateTime     @default(now())
  updatedDate DateTime?    @updatedAt

  @@unique([orgId, id])
}

model Permission {
  name        String    @id
  description String
  createdDate DateTime  @default(now())
  isInternal  Boolean   @default(false)
  order       Int?      @default(0)
  updatedDate DateTime? @updatedAt
  roles       Role[]
}

model UserInfo {
  displayName String?
  bio         String?
  avatarImage Json?
  coverImage  Json?
  phoneNumber String?
  createdDate DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @id
}

enum UserVerifyDocumentType {
  Facebook
  Email
  PhoneNumber
}

model UserIdentifyDocument {
  id        String                 @id @default(uuid())
  userId    String
  type      UserVerifyDocumentType
  value     String
  isVerfied Boolean?

  @@index(fields: [userId], name: "user_identify_document_index")
}

model Area {
  id           String   @id @default(uuid())
  region       String
  name         String
  slug         String   @unique
  parentAreaId String?
  latitude     Float
  longitude    Float
  order        Int?     @default(0)
  isDefault    Boolean? @default(false)
  isDisabled   Boolean? @default(false)
  isDeleted    Boolean? @default(false)
  items        Item[]   @relation(references: [id])
}

model Category {
  id               String   @id @default(uuid())
  name             String
  slug             String   @unique
  imageUrl         String?
  coverImageUrl    String?
  parentCategoryId String?
  order            Int?     @default(0)
  isDefault        Boolean? @default(false)
  isDisabled       Boolean? @default(false)
  isDeleted        Boolean? @default(false)
  items            Item[]   @relation(references: [id])
  seoTitle         String?
  seoDescription   String?
  isFeatured       Boolean? @default(false)
}

enum FileUsingLocate {
  ItemPreviewImage
  UserAvatarImage
  UserCoverImage
  UserRentingDocuments
}

model FileStorage {
  id              String           @id @default(uuid())
  url             String
  name            String
  bucketName      String
  folderName      String
  contentType     String
  usingLocate     FileUsingLocate?
  isUploadSuccess Boolean?         @default(false)
  createdBy       String
  createdDate     DateTime         @default(now())
  isDeleted       Boolean?         @default(false)
  orgId           String?

  @@index(fields: [folderName, createdBy], name: "file_storage_main_index")
}

enum ItemStatus {
  Draft
  Blocked
  Published
}

// areas, FE will use the last area, it's smallest unit
model Item {
  id                        String               @id @default(uuid())
  pid                       Int                  @unique @default(autoincrement())
  sku                       String?
  org                       Organization?        @relation("ItemBelongToOrg", fields: [orgId], references: [id])
  orgId                     String?
  name                      String
  slug                      String
  description               Json?
  termAndCondition          Json?
  categories                Category[]           @relation(references: [id])
  areas                     Area[]               @relation(references: [id])
  rentingItemRequests       RentingItemRequest[]
  images                    Json?
  checkBeforeRentDocuments  Json?
  keepWhileRentingDocuments Json?
  unavailableForRentDays    DateTime[]
  currentOriginalPrice      Float?
  sellPrice                 Float?
  hidePrice                 Boolean?             @default(false)
  rentPricePerDay           Float?
  rentPricePerWeek          Float?
  rentPricePerMonth         Float?
  currencyCode              String?
  summaryReviewCore         Float?
  summaryReviewCount        Float?
  totalQuantity             Int                  @default(1)
  isVerified                Boolean?             @default(false)
  status                    ItemStatus
  note                      String?
  ownerUser                 User                 @relation(fields: [ownerUserId], references: [id])
  ownerUserId               String
  isDeleted                 Boolean?             @default(false)
  createdDate               DateTime             @default(now())
  updatedDate               DateTime             @updatedAt
  updatedBy                 String
  keyword                   String?

  ItemReview  ItemReview[]
  WishingItem WishingItem[]

  rentingOrderItems RentingOrderItem[] @relation("RentingOrderItemBelongToItem")
  @@index(fields: [status, isDeleted, isVerified, keyword], name: "item_main_index")
  @@index(fields: [createdDate], name: "item_created_date_index")
  @@index(fields: [keyword], name: "item_keyword_index")
  @@index(fields: [ownerUserId], name: "item_owner_user_index")
}

enum RentingMandatoryVerifyDocumentDataType {
  Label
  Currency
}

// tien coc, bang lai xe,
model RentingMandatoryVerifyDocument {
  id       String                                 @id @default(uuid())
  name     String
  dataType RentingMandatoryVerifyDocumentDataType
}

enum RentingItemRequestStatus {
  New
  Declined
  Approved
  InProgress
  Completed
  Cancelled
}

model RentingItemRequest {
  id                         String                       @id @default(uuid())
  rentingItem                Item                         @relation(fields: [itemId], references: [id])
  itemId                     String
  totalAmount                Float?                       @default(0)
  actualTotalAmount          Float?                       @default(0)
  rentTotalQuantity          Int?                         @default(1)
  hidePrice                  Boolean?                     @default(false)
  rentPricePerDay            Float?
  rentPricePerWeek           Float?
  rentPricePerMonth          Float?
  fromDate                   DateTime
  toDate                     DateTime
  status                     RentingItemRequestStatus?
  ownerUser                  User                         @relation("OwnerRequest", fields: [ownerUserId], references: [id])
  ownerUserId                String
  lenderUser                 User                         @relation("LenderOfRequest", fields: [lenderUserId], references: [id])
  lenderUserId               String
  isDeleted                  Boolean?                     @default(false)
  createdDate                DateTime                     @default(now())
  updatedDate                DateTime                     @updatedAt
  updatedBy                  String
  RentingItemRequestActivity RentingItemRequestActivity[]

  @@index(fields: [ownerUserId], name: "request_owner_user_index")
  @@index(fields: [lenderUserId], name: "request_lender_user_index")
  @@index(fields: [itemId], name: "request_item_index")
}

model ItemReview {
  id               String   @id @default(uuid())
  rentingItem      Item     @relation(fields: [itemId], references: [id])
  itemId           String
  rentingRequestId String?
  reviewScore      Int
  reviewComment    String?
  images           String?
  ownerUser        User     @relation("OwnerItemReview", fields: [ownerUserId], references: [id])
  ownerUserId      String
  isDeleted        Boolean? @default(false)
  createdDate      DateTime @default(now())
  updatedDate      DateTime @updatedAt
  updatedBy        String

  @@index(fields: [ownerUserId], name: "review_owner_user_index")
  @@index(fields: [itemId], name: "review_item_index")
}

model UserReview {
  id               String   @id @default(uuid())
  toUser           User     @relation("ToUserReview", fields: [toUserId], references: [id])
  toUserId         String
  rentingRequestId String?
  reviewScore      Int
  reviewComment    String?
  ownerUser        User     @relation("OwnerUserReview", fields: [ownerUserId], references: [id])
  ownerUserId      String
  isDeleted        Boolean? @default(false)
  createdDate      DateTime @default(now())
  updatedDate      DateTime @updatedAt
  updatedBy        String

  @@index(fields: [ownerUserId], name: "user_review_owner_user_index")
  @@index(fields: [toUserId], name: "user_review_to_user_index")
}

enum RentingItemRequestActivityType {
  Comment
  Declined
  Approved
  InProgress
  Completed
  Cancelled
}

model RentingItemRequestActivity {
  id                   String                         @id @default(uuid())
  rentingItemRequest   RentingItemRequest             @relation(fields: [rentingItemRequestId], references: [id])
  rentingItemRequestId String
  comment              String?
  type                 RentingItemRequestActivityType
  files                Json?
  isDisabled           Boolean?                       @default(false)
  isDeleted            Boolean?                       @default(false)
  createdDate          DateTime                       @default(now())
  updatedDate          DateTime                       @updatedAt
  createdBy            String
  updatedBy            String

  @@index(fields: [rentingItemRequestId], name: "renting_request_id_index")
}

// Log Systems
model SearchKeyword {
  keyword     String   @id
  searchCount Int?     @default(0)
  isVerified  Boolean? @default(false)
}

model UserLoginLog {
  id           String   @id @default(uuid())
  ownerUserId  String
  ipAddress    String
  signedInDate DateTime @default(now())

  @@index(fields: [ownerUserId], name: "login_log_owner_user_index")
}

enum UserNotificationType {
  RentingRequestIsCreated
  RentingRequestIsDeclined
  RentingRequestIsApproved
  RentingRequestIsInProgress
  RentingRequestIsCompleted
  RentingRequestIsCancelled
}

model UserNotification {
  id          String               @id @default(uuid())
  forUser     User                 @relation("ForUserNotification", fields: [forUserId], references: [id])
  forUserId   String
  data        Json?
  type        UserNotificationType
  isRead      Boolean?             @default(false)
  createdDate DateTime             @default(now())

  @@index(fields: [createdDate], name: "user_notification_index")
  @@index(fields: [forUserId], name: "notification_for_user_index")
}

model WishingItem {
  ownerUserId String
  item        Item     @relation(fields: [itemId], references: [id])
  itemId      String
  createdDate DateTime @default(now())

  @@id([ownerUserId, itemId])
}

model MyUserContact {
  ownerUserId String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdDate DateTime @default(now())

  @@id([ownerUserId, userId])
}

//
// const notification1 = await photon.notifications.create({
//     data: {
//       mode: "email",
//     deliveryDate: new Date(),
//   destinationUserIDList: {
//     set: ["123", "456"]  -------> Array using set keyword
// },
// status: "pending",
// payload: '{"hello":"world"}'
// }
// });
//
// https://github.com/prisma/prisma/issues/3475 -> contain in array
model ChatConversation {
  id          String   @id @default(uuid())
  createdDate DateTime @default(now())

  createdBy String

  chatMessages            ChatMessage[]
  chatConversationMembers ChatConversationMember[]
}

model ChatConversationMember {
  chatConversation   ChatConversation @relation(fields: [chatConversationId], references: [id])
  chatConversationId String
  userId             String

  @@id([chatConversationId, userId])
}

// https://www.prisma.io/docs/concepts/components/prisma-schema/relations#self-relations
// https://dba.stackexchange.com/questions/97963/how-to-build-a-table-for-a-private-messaging-system-that-supports-replies/167579#167579
model ChatMessage {
  id      String @id @default(uuid())
  content String

  replyBy   ChatMessage? @relation("ChatMessageReplyRelation")
  replyToId String?
  replyTo   ChatMessage? @relation("ChatMessageReplyRelation", fields: [replyToId], references: [id])

  chatConversation   ChatConversation @relation(fields: [chatConversationId], references: [id])
  chatConversationId String

  fromUserId String
  isRead     Boolean? @default(false)

  createdDate DateTime @default(now())

  @@index(fields: [replyToId, id], name: "user_chat_message_index")
}

enum SellingOrderSystemStatusType {
  New
  Approved
  InProgress
  Completed
  Cancelled
}

model SellingOrder {
  id             String                       @id @default(uuid())
  orderCustomId  String?
  org            Organization                 @relation("SellingOrderBelongToOrg", fields: [orgId], references: [id])
  orgId          String
  totalAmount    Float?                       @default(0)
  note           String?
  customerUser   User                         @relation("SellingOrderBelongToCustomer", fields: [customerUserId], references: [id])
  customerUserId String
  isDeleted      Boolean?                     @default(false)
  createdDate    DateTime                     @default(now())
  updatedDate    DateTime                     @updatedAt
  updatedBy      String
  systemStatus   SellingOrderSystemStatusType
  status         String
  attachedFiles  Json?

  rentingOrderItems   RentingOrderItem[]   @relation("RentingOrderItemBelongToSellingOrder")
  rentingDepositItems RentingDepositItem[] @relation("RentingDepositItemBelongToSellingOrder")

  @@index(fields: [orgId, isDeleted], name: "selling_order_no_delete_index")
  @@index(fields: [orgId, status, isDeleted], name: "selling_order_status_no_delete_index")
}

enum RentingOrderItemStatusType {
  New
  Approved
  InProgress
  Completed
  Cancelled
}

model RentingOrderItem {
  id   String  @id @default(uuid())
  sku  String?
  name String
  note String?

  amount            Float?                     @default(0)
  quantity          Int?                       @default(0)
  pickupDateTime    DateTime?
  returningDateTime DateTime?
  systemStatus      RentingOrderItemStatusType
  status            String
  unitPrice         Float?                     @default(0)
  unitPricePerDay   Float?                     @default(0)
  unitPricePerWeek  Float?                     @default(0)
  unitPricePerMonth Float?                     @default(0)
  attachedFiles     Json?

  isDeleted      Boolean?     @default(false)
  createdDate    DateTime     @default(now())
  updatedDate    DateTime     @updatedAt
  updatedBy      String
  item           Item?        @relation("RentingOrderItemBelongToItem", fields: [itemId], references: [id])
  itemId         String?
  org            Organization @relation("SellingOrderItemBelongToOrg", fields: [orgId], references: [id])
  orgId          String
  sellingOrder   SellingOrder @relation("RentingOrderItemBelongToSellingOrder", fields: [sellingOrderId], references: [id])
  sellingOrderId String
  customerUser   User         @relation("RentingOrderItemBelongToCustomer", fields: [customerUserId], references: [id])
  customerUserId String
  order          Int?         @default(0)
}

enum RentingDepositItemSystemStatusType {
  New
  Approved
  Returned
}

enum RentingDepositItemSystemType {
  Money
  Document
  Item
  Other
}

model RentingDepositItem {
  id            String                             @id @default(uuid())
  type          String
  note          String?
  valueAmount   Float?                             @default(0)
  attachedFiles Json?
  systemStatus  RentingDepositItemSystemStatusType
  status        String

  sellingOrder   SellingOrder? @relation("RentingDepositItemBelongToSellingOrder", fields: [sellingOrderId], references: [id])
  sellingOrderId String?
  org            Organization  @relation("RentingDepositItemBelongToOrg", fields: [orgId], references: [id])
  orgId          String
  customerUser   User          @relation("RentingDepositItemBelongToCustomer", fields: [customerUserId], references: [id])
  customerUserId String
  order          Int?          @default(0)
}

enum CommonAttributesType {
  SellingOrderStatus
  RentingOrderItemStatus
  RentingDepositItemStatus
  RentingDepositItemType
}

model CommonAttributesConfig {
  description        String?
  value              String // Value khong duoc thay doi, sau khi da tao
  label              String
  type               CommonAttributesType
  customConfigs      Json?
  mapWithSystemValue String?
  isDisabled         Boolean?             @default(false)
  isDefault          Boolean?             @default(false)
  order              Int?                 @default(0)
  org                Organization         @relation("CommonAttributesConfigBelongToOrg", fields: [orgId], references: [id])
  orgId              String
  createdDate        DateTime             @default(now())
  updatedDate        DateTime             @updatedAt
  updatedBy          String

  @@id([orgId, type, value])
  @@index(fields: [orgId, type], name: "common_attributes_org_type_index")
  @@index(fields: [orgId, mapWithSystemValue], name: "common_attributes_map_system_value_index")
}

// Item Reviews?
// Renting Request Comments? with attach files
// Cho phep khoa comment, do chu shop khoa, thi comment ko the chinh sua hoac xoa nua
// Renting Request Review

// Log Search Keywork
// Log User Signed In
// Item Yeu Thich
// Luu danh ba nguoi cho thue
// User Notifications
// Log user sharing

// Trust User?
