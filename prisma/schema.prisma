// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  Admin
  User
}

model User {
  id                        String     @id @default(uuid())
  email                     String?    @unique
  phoneNumber               String?    @unique
  passwordHash              String?
  currentHashedRefreshToken String?    @unique
  role                      UserRole[]
  facebookId                String?    @unique
  facebookAccessToken       String?
  googleId                  String?    @unique
  googleAccessToken         String?
  isEmailVerified           Boolean    @default(false)
  resetPasswordToken        String?
  verifyEmailToken          String?
  verifyPhoneToken          String?
  userInfo                  UserInfo?
  lastSignedIn              DateTime   @default(now())

  ownerItemReview              ItemReview[]         @relation("OwnerItemReview")
  ownerUserRentingItemRequest  RentingItemRequest[] @relation("OwnerRequest")
  lenderUserRentingItemRequest RentingItemRequest[] @relation("LenderOfRequest")
  reviewFromUser               UserReview[]         @relation("OwnerUserReview")
  reviewToUser                 UserReview[]         @relation("ToUserReview")
  Item                         Item[]
  MyUserContact                MyUserContact[]
  userNotifications            UserNotification[]   @relation("ForUserNotification")
}

model UserInfo {
  displayName String?
  bio         String?
  avatarImage String? // { id, url }
  coverImage  String? // { id, url }
  phoneNumber String?
  createdDate DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @id
}

enum UserVerifyDocumentType {
  Facebook
  Email
  PhoneNumber
}

model UserIdentifyDocument {
  id        String                 @id @default(uuid())
  userId    String
  type      UserVerifyDocumentType
  value     String
  isVerfied Boolean?
}

model Area {
  id           String   @id @default(uuid())
  region       String
  name         String
  slug         String   @unique
  parentAreaId String?
  latitude     Float
  longitude    Float
  order        Int?     @default(0)
  isDefault    Boolean? @default(false)
  isDisabled   Boolean? @default(false)
  isDeleted    Boolean? @default(false)
  items        Item[]   @relation(references: [id])
}

model Category {
  id               String   @id @default(uuid())
  name             String
  slug             String   @unique
  imageUrl         String?
  coverImageUrl    String?
  parentCategoryId String?
  order            Int?     @default(0)
  isDefault        Boolean? @default(false)
  isDisabled       Boolean? @default(false)
  isDeleted        Boolean? @default(false)
  items            Item[]   @relation(references: [id])
  isFeatured       Boolean? @default(false)
}

enum FileUsingLocate {
  ItemPreviewImage
  UserAvatarImage
  UserCoverImage
}

model FileStorage {
  id              String           @id @default(uuid())
  url             String
  name            String
  bucketName      String
  folderName      String
  contentType     String
  usingLocate     FileUsingLocate?
  isUploadSuccess Boolean?         @default(false)
  createdBy       String
  createdDate     DateTime         @default(now())
  isDeleted       Boolean?         @default(false)

  @@index(fields: [folderName, createdBy], name: "file_storage_main_index")
}

enum ItemStatus {
  Draft
  Blocked
  Published
}

// areas, FE will use the last area, it's smallest unit
model Item {
  id                        String               @id @default(uuid())
  name                      String
  slug                      String
  description               String?
  termAndCondition          String?
  categories                Category[]           @relation(references: [id])
  areas                     Area[]               @relation(references: [id])
  rentingItemRequests       RentingItemRequest[]
  images                    String?
  checkBeforeRentDocuments  String?
  keepWhileRentingDocuments String?
  unavailableForRentDays    DateTime[]
  currentOriginalPrice      Float?
  sellPrice                 Float?
  rentPricePerDay           Float?
  rentPricePerWeek          Float?
  rentPricePerMonth         Float?
  currencyCode              String?
  summaryReviewCore         Float?
  summaryReviewCount        Float?
  totalQuantity             Int                  @default(1)
  isVerified                Boolean?             @default(false)
  status                    ItemStatus
  note                      String?
  ownerUser                 User                 @relation(fields: [ownerUserId], references: [id])
  ownerUserId               String
  isDeleted                 Boolean?             @default(false)
  createdDate               DateTime             @default(now())
  updatedDate               DateTime             @updatedAt
  updatedBy                 String
  keyword                   String?

  ItemReview  ItemReview[]
  WishingItem WishingItem[]

  @@index(fields: [status, isDeleted, isVerified], name: "item_main_index")
  @@index(fields: [createdDate], name: "item_created_date_index")
  @@index(fields: [keyword], name: "item_keyword_index")
}

enum RentingMandatoryVerifyDocumentDataType {
  Label
  Currency
}

// tien coc, bang lai xe,
model RentingMandatoryVerifyDocument {
  id       String                                 @id @default(uuid())
  name     String
  dataType RentingMandatoryVerifyDocumentDataType
}

enum RentingItemRequestStatus {
  New
  Declined
  Approved
  InProgress
  Completed
  Cancelled
}

model RentingItemRequest {
  id                         String                       @id @default(uuid())
  rentingItem                Item                         @relation(fields: [itemId], references: [id])
  itemId                     String
  totalAmount                Float?                       @default(0)
  actualTotalAmount          Float?                       @default(0)
  rentTotalQuantity          Int?                         @default(1)
  fromDate                   DateTime
  toDate                     DateTime
  status                     RentingItemRequestStatus?
  ownerUser                  User                         @relation("OwnerRequest", fields: [ownerUserId], references: [id])
  ownerUserId                String
  lenderUser                 User                         @relation("LenderOfRequest", fields: [lenderUserId], references: [id])
  lenderUserId               String
  isDeleted                  Boolean?                     @default(false)
  createdDate                DateTime                     @default(now())
  updatedDate                DateTime                     @updatedAt
  updatedBy                  String
  RentingItemRequestActivity RentingItemRequestActivity[]
}

model ItemReview {
  id               String   @id @default(uuid())
  rentingItem      Item     @relation(fields: [itemId], references: [id])
  itemId           String
  rentingRequestId String?
  reviewScore      Int
  reviewComment    String?
  images           String?
  ownerUser        User     @relation("OwnerItemReview", fields: [ownerUserId], references: [id])
  ownerUserId      String
  isDeleted        Boolean? @default(false)
  createdDate      DateTime @default(now())
  updatedDate      DateTime @updatedAt
  updatedBy        String
}

model UserReview {
  id               String   @id @default(uuid())
  toUser           User     @relation("ToUserReview", fields: [toUserId], references: [id])
  toUserId         String
  rentingRequestId String?
  reviewScore      Int
  reviewComment    String?
  ownerUser        User     @relation("OwnerUserReview", fields: [ownerUserId], references: [id])
  ownerUserId      String
  isDeleted        Boolean? @default(false)
  createdDate      DateTime @default(now())
  updatedDate      DateTime @updatedAt
  updatedBy        String
}

enum RentingItemRequestActivityType {
  Comment
  Declined
  Approved
  InProgress
  Completed
  Cancelled
}

model RentingItemRequestActivity {
  id                   String                         @id @default(uuid())
  rentingItemRequest   RentingItemRequest             @relation(fields: [rentingItemRequestId], references: [id])
  rentingItemRequestId String
  comment              String?
  type                 RentingItemRequestActivityType
  files                String? // JSON
  isDisabled           Boolean?                       @default(false)
  isDeleted            Boolean?                       @default(false)
  createdDate          DateTime                       @default(now())
  updatedDate          DateTime                       @updatedAt
  createdBy            String
  updatedBy            String
}

// Log Systems
model SearchKeyword {
  keyword String @id
  count   Int?   @default(0)
}

model UserLoginLog {
  id           String   @id @default(uuid())
  ownerUserId  String
  ipAddress    String
  signedInDate DateTime @default(now())
}

enum UserNotificationType {
  RentingRequestIsCreated
  RentingRequestIsDeclined
  RentingRequestIsApproved
  RentingRequestIsInProgress
  RentingRequestIsCompleted
  RentingRequestIsCancelled
}

model UserNotification {
  id          String               @id @default(uuid())
  forUser     User                 @relation("ForUserNotification", fields: [forUserId], references: [id])
  forUserId   String
  data        String? // JSON
  type        UserNotificationType
  isRead      Boolean?             @default(false)
  createdDate DateTime             @default(now())

  @@index(fields: [createdDate], name: "user_notification_index")
}

model WishingItem {
  ownerUserId String
  item        Item     @relation(fields: [itemId], references: [id])
  itemId      String
  createdDate DateTime @default(now())

  @@id([ownerUserId, itemId])
}

model MyUserContact {
  ownerUserId String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdDate DateTime @default(now())

  @@id([ownerUserId, userId])
}

//
// const notification1 = await photon.notifications.create({
//     data: {
//       mode: "email",
//     deliveryDate: new Date(),
//   destinationUserIDList: {
//     set: ["123", "456"]  -------> Array using set keyword
// },
// status: "pending",
// payload: '{"hello":"world"}'
// }
// });
//
// https://github.com/prisma/prisma/issues/3475 -> contain in array
model ChatConversation {
  id          String   @id @default(uuid())
  createdDate DateTime @default(now())

  createdBy String

  chatMessages            ChatMessage[]
  chatConversationMembers ChatConversationMember[]
}

model ChatConversationMember {
  chatConversation   ChatConversation @relation(fields: [chatConversationId], references: [id])
  chatConversationId String
  userId             String

  @@id([chatConversationId, userId])
}

// https://www.prisma.io/docs/concepts/components/prisma-schema/relations#self-relations
// https://dba.stackexchange.com/questions/97963/how-to-build-a-table-for-a-private-messaging-system-that-supports-replies/167579#167579
model ChatMessage {
  id      String @id @default(uuid())
  content String

  replyBy   ChatMessage? @relation("ChatMessageReplyRelation")
  replyToId String?
  replyTo   ChatMessage? @relation("ChatMessageReplyRelation", fields: [replyToId], references: [id])

  chatConversation   ChatConversation @relation(fields: [chatConversationId], references: [id])
  chatConversationId String

  fromUserId String
  isRead     Boolean? @default(false)

  createdDate DateTime @default(now())

  @@index(fields: [replyToId, id], name: "user_chat_message_index")
}

// Item Reviews?
// Renting Request Comments? with attach files
// Cho phep khoa comment, do chu shop khoa, thi comment ko the chinh sua hoac xoa nua
// Renting Request Review

// Log Search Keywork
// Log User Signed In
// Item Yeu Thich
// Luu danh ba nguoi cho thue
// User Notifications
// Log user sharing

// Trust User?
