// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["orderByRelation"]
}

model Organization {
  id                                           String                                         @id @default(uuid())
  name                                         String?
  description                                  String?
  avatarImage                                  Json?
  slug                                         String?                                        @unique
  createdDate                                  DateTime?                                      @default(now())
  updatedDate                                  DateTime?                                      @updatedAt
  rolesThisOrgHaving                           Role[]
  createdByUser                                User?                                          @relation("CreatedByUser", fields: [createdBy], references: [id])
  createdBy                                    String?
  employees                                    Employee[]
  customers                                    Customer[]
  items                                        Item[]                                         @relation("ItemBelongToOrg")
  rentingOrder                                 RentingOrder[]                                 @relation("RentingOrderBelongToOrg")
  rentingOrderItems                            RentingOrderItem[]                             @relation("RentingOrderItemBelongToOrg")
  rentingDepositItems                          RentingDepositItem[]                           @relation("RentingDepositItemBelongToOrg")
  commonAttributesConfigs                      CommonAttributesConfig[]                       @relation("CommonAttributesConfigBelongToOrg")
  orgCategories                                OrgCategory[]                                  @relation("OrgCategoryBelongToOrg")
  orgDailyOrderStatistics                      OrgDailyOrderStatistics[]                      @relation("OrgDailyOrderStatisticsBelongToOrg")
  orgDailyCategoryStatistics                   OrgDailyCategoryStatistics[]                   @relation("OrgDailyCategoryStatisticsBelongToOrg")
  orgDailyItemStatistics                       OrgDailyItemStatistics[]                       @relation("OrgDailyItemStatisticsBelongToOrg")
  orgDailyCustomerTradeTrackingCountStatistics OrgDailyCustomerTradeTrackingCountStatistics[] @relation("OrgDailyCustomerTradeTrackingCountStatisticsBelongToOrg")
  orgOrgTransactionHistories                   OrgTransactionHistory[]                        @relation("OrgTransactionHistoryBelongToOrg")
  userReviews                                  UserReview[]                                   @relation("UserReviewCreatedByOrg")
  orgActivityLogs                              OrgActivityLog[]                               @relation("OrgActivityLogBelongToOrg")
  orgDailyCustomerStatistics          OrgDailyCustomerStatistics[]      @relation("OrgDailyCustomerStatisticsBelongToOrg")
}

model Employee {
  id           String       @id @default(uuid())
  user         User         @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [orgId], references: [id])
  userId       String
  orgId        String
  roles        Role[]
  isOwner      Boolean      @default(false)
  createdDate  DateTime?    @default(now())
  updatedDate  DateTime?    @updatedAt
  createdBy    String?
  updatedBy    String?

  isDisabled Boolean? @default(false)
  isDeleted  Boolean? @default(false)

  employeeOrgActivityLogs EmployeeOrgActivityLog[] @relation("EmployeeOrgActivityLogBelongToEmployee")

  @@unique([userId, orgId])
}

model Customer {
  id           String       @id @default(uuid())
  user         User         @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [orgId], references: [id])
  userId       String
  orgId        String
  displayName  String?
  gender       String?
  email        String?
  phoneNumber  String?
  address      String?
  birthday     DateTime?
  createdDate  DateTime?    @default(now())
  updatedDate  DateTime?    @updatedAt
  createdBy    String?
  updatedBy    String?

  isDisabled Boolean? @default(false)
  isDeleted  Boolean? @default(false)

  customerOrgActivityLogs CustomerOrgActivityLog[] @relation("CustomerOrgActivityLogBelongToCustomer")
  @@unique([userId, orgId])
  @@unique([id, orgId])
}

model User {
  id                           String               @id @default(uuid())
  email                        String?              @unique
  currentOrgId                 String?
  phoneNumber                  String?              @unique
  passwordHash                 String?
  currentHashedRefreshToken    String?              @unique
  facebookId                   String?              @unique
  facebookAccessToken          String?
  googleId                     String?              @unique
  googleAccessToken            String?
  isEmailVerified              Boolean              @default(false)
  resetPasswordToken           String?
  verifyEmailToken             String?
  verifyPhoneToken             String?
  userInfo                     UserInfo?
  lastSignedIn                 DateTime             @default(now())
  isBlocked                    Boolean?             @default(false)
  isDeleted                    Boolean?             @default(false)
  systemNote                   String?
  orgsThisUserCreate           Organization[]       @relation("CreatedByUser")
  employeesThisUserBecome      Employee[]
  customersThisUserBecome      Customer[]
  ownerUserRentingItemRequest  RentingItemRequest[] @relation("OwnerRequest")
  lenderUserRentingItemRequest RentingItemRequest[] @relation("LenderOfRequest")
  reviewFromUser               UserReview[]         @relation("OwnerUserReview")
  reviewToUser                 UserReview[]         @relation("ToUserReview")
  item                         Item[]
  myUserContact                MyUserContact[]
  userNotifications            UserNotification[]   @relation("ForUserNotification")
  rentingOrders                RentingOrder[]       @relation("RentingOrderBelongToCustomer")
  rentingOrderItems            RentingOrderItem[]   @relation("RentingOrderItemBelongToCustomer")

  rentingDepositItems            RentingDepositItem[]    @relation("RentingDepositItemBelongToCustomer")
  createdOrgTransactionHistories OrgTransactionHistory[] @relation("OrgTransactionHistoryCreatedByUser")
  ownerTransactionHistories      OrgTransactionHistory[] @relation("OrgTransactionHistoryOwnerUser")
  itemReviews                    ItemReview[]            @relation("ItemReviewBelongToUser")
  userReviews                    UserReview[]            @relation("UserReviewCreatedByUser")
  orgActivityLogs                OrgActivityLog[]        @relation("OrgActivityLogCreatedByUser")
}

model Role {
  id          String       @id @default(uuid())
  name        String
  description String?
  org         Organization @relation(fields: [orgId], references: [id])
  orgId       String
  employees   Employee[]
  isDefault   Boolean      @default(false)
  permissions Permission[]
  order       Int?         @default(0)
  createdDate DateTime     @default(now())
  updatedDate DateTime?    @updatedAt

  @@unique([orgId, id])
}

model Permission {
  name        String    @id
  description String
  createdDate DateTime  @default(now())
  isInternal  Boolean   @default(false)
  order       Int?      @default(0)
  updatedDate DateTime? @updatedAt
  roles       Role[]
}

model UserInfo {
  displayName String?
  bio         String?
  avatarImage Json?
  coverImage  Json?
  phoneNumber String?
  createdDate DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @id
}

enum UserVerifyDocumentType {
  Facebook
  Email
  PhoneNumber
}

model UserIdentifyDocument {
  id        String                 @id @default(uuid())
  userId    String
  type      UserVerifyDocumentType
  value     String
  isVerfied Boolean?

  @@index(fields: [userId], name: "user_identify_document_index")
}

model Area {
  id           String   @id @default(uuid())
  region       String
  name         String
  slug         String   @unique
  parentAreaId String?
  latitude     Float
  longitude    Float
  order        Int?     @default(0)
  isDefault    Boolean? @default(false)
  isDisabled   Boolean? @default(false)
  isDeleted    Boolean? @default(false)
  items        Item[]   @relation(references: [id])
}

model Category {
  id               String        @id @default(uuid())
  name             String
  slug             String        @unique
  imageUrl         String?
  coverImageUrl    String?
  parentCategoryId String?
  order            Int?          @default(0)
  isDefault        Boolean?      @default(false)
  isDisabled       Boolean?      @default(false)
  isDeleted        Boolean?      @default(false)
  items            Item[]        @relation(references: [id])
  orgCategories    OrgCategory[] @relation("OrgCategoryBelongToCategory")
  seoTitle         String?
  seoDescription   String?
  isFeatured       Boolean?      @default(false)
}

enum FileUsingLocate {
  ItemPreviewImage
  UserAvatarImage
  UserCoverImage
  OrgAvatarImage
  RentingOrderItemImage
  RentingDepositItemImage
  RentingOrderActivityImage
  BookingActivityImage
  PaymentTransactionImage
  RefundTransactionImage
}

model FileStorage {
  id              String           @id @default(uuid())
  url             String
  name            String
  bucketName      String
  folderName      String
  contentType     String
  sizes           String[]
  usingLocate     FileUsingLocate?
  isUploadSuccess Boolean?         @default(false)
  createdBy       String
  createdDate     DateTime         @default(now())
  isDeleted       Boolean?         @default(false)
  orgId           String?

  @@index(fields: [folderName, createdBy], name: "file_storage_main_index")
}

enum ItemStatus {
  Draft
  Blocked
  Published
}

// areas, FE will use the last area, it's smallest unit
model Item {
  id                        String               @id @default(uuid())
  pid                       Int                  @unique @default(autoincrement())
  sku                       String?
  org                       Organization?        @relation("ItemBelongToOrg", fields: [orgId], references: [id])
  orgId                     String?
  name                      String
  slug                      String
  description               Json?
  termAndCondition          Json?
  categories                Category[]           @relation(references: [id])
  orgCategories             OrgCategory[]        @relation(references: [id])
  areas                     Area[]               @relation(references: [id])
  rentingItemRequests       RentingItemRequest[]
  images                    Json?
  checkBeforeRentDocuments  Json?
  keepWhileRentingDocuments Json?
  unavailableForRentDays    DateTime[]
  currentOriginalPrice      Int?
  sellPrice                 Int?
  hidePrice                 Boolean?             @default(false)
  rentPricePerDay           Int?
  rentPricePerWeek          Int?
  rentPricePerMonth         Int?
  currencyCode              String?
  summaryReviewCore         Float?
  summaryReviewCount        Float?
  totalQuantity             Int                  @default(1)
  isVerified                Boolean?             @default(false)
  status                    ItemStatus
  note                      String?
  ownerUser                 User                 @relation(fields: [ownerUserId], references: [id])
  ownerUserId               String
  isDeleted                 Boolean?             @default(false)
  createdDate               DateTime             @default(now())
  updatedDate               DateTime             @updatedAt
  updatedBy                 String
  keyword                   String?

  ItemReview  ItemReview[]
  WishingItem WishingItem[]

  rentingOrderItems      RentingOrderItem[]       @relation("RentingOrderItemBelongToItem")
  orgDailyItemStatistics OrgDailyItemStatistics[] @relation("OrgDailyItemStatisticsBelongToItem")

  orgRentingOrderItemTransactionHistories OrgRentingOrderItemTransactionHistory[] @relation("OrgRentingOrderItemTransactionBelongToItem")
  itemOrgActivityLog                      ItemOrgActivityLog[]                    @relation("ItemOrgActivityLogBelongToItem")


  @@index(fields: [status, isDeleted, isVerified, keyword], name: "item_main_index")
  @@index(fields: [createdDate], name: "item_created_date_index")
  @@index(fields: [keyword], name: "item_keyword_index")
  @@index(fields: [ownerUserId], name: "item_owner_user_index")
}

enum RentingMandatoryVerifyDocumentDataType {
  Label
  Currency
}

// tien coc, bang lai xe,
model RentingMandatoryVerifyDocument {
  id       String                                 @id @default(uuid())
  name     String
  dataType RentingMandatoryVerifyDocumentDataType
}

enum RentingItemRequestStatus {
  New
  Declined
  Approved
  InProgress
  Completed
  Cancelled
}

model RentingItemRequest {
  id                         String                       @id @default(uuid())
  rentingItem                Item                         @relation(fields: [itemId], references: [id])
  itemId                     String
  totalAmount                Int?                         @default(0)
  actualTotalAmount          Int?                         @default(0)
  rentTotalQuantity          Int?                         @default(1)
  hidePrice                  Boolean?                     @default(false)
  rentPricePerDay            Int?
  rentPricePerWeek           Int?
  rentPricePerMonth          Int?
  fromDate                   DateTime
  toDate                     DateTime
  status                     RentingItemRequestStatus?
  ownerUser                  User                         @relation("OwnerRequest", fields: [ownerUserId], references: [id])
  ownerUserId                String
  lenderUser                 User                         @relation("LenderOfRequest", fields: [lenderUserId], references: [id])
  lenderUserId               String
  isDeleted                  Boolean?                     @default(false)
  createdDate                DateTime                     @default(now())
  updatedDate                DateTime                     @updatedAt
  updatedBy                  String
  RentingItemRequestActivity RentingItemRequestActivity[]

  @@index(fields: [ownerUserId], name: "request_owner_user_index")
  @@index(fields: [lenderUserId], name: "request_lender_user_index")
  @@index(fields: [itemId], name: "request_item_index")
}

model ItemReview {
  id            String   @id @default(uuid())
  rentingItem   Item     @relation(fields: [itemId], references: [id])
  itemId        String
  refId         String? // Booking Request Id, OrderItem Id
  reviewScore   Int
  reviewComment String?
  attachedFiles Json?
  createdByUser User     @relation("ItemReviewBelongToUser", fields: [createdBy], references: [id])
  createdBy     String
  isDeleted     Boolean? @default(false)
  createdDate   DateTime @default(now())
  updatedDate   DateTime @updatedAt
  updatedBy     String

  @@index(fields: [createdBy], name: "review_owner_user_index")
  @@index(fields: [itemId], name: "review_item_index")
}

model UserReview {
  id             String        @id @default(uuid())
  toUser         User          @relation("ToUserReview", fields: [toUserId], references: [id])
  toUserId       String
  refId          String? // Booking Request Id, OrderItem Id
  reviewScore    Int
  reviewComment  String?
  createdByUser  User          @relation("UserReviewCreatedByUser", fields: [createdBy], references: [id])
  createdBy      String
  createdByOrg   Organization? @relation("UserReviewCreatedByOrg", fields: [createdByOrgId], references: [id])
  createdByOrgId String?
  isDeleted      Boolean?      @default(false)
  createdDate    DateTime      @default(now())
  updatedDate    DateTime      @updatedAt
  updatedBy      String

  User   User?   @relation("OwnerUserReview", fields: [userId], references: [id])
  userId String?
  @@index(fields: [toUserId], name: "user_review_by_user_index")
}

enum RentingItemRequestActivityType {
  Comment
  Declined
  Approved
  InProgress
  Completed
  Cancelled
}

model RentingItemRequestActivity {
  id                   String                         @id @default(uuid())
  rentingItemRequest   RentingItemRequest             @relation(fields: [rentingItemRequestId], references: [id])
  rentingItemRequestId String
  comment              String?
  type                 RentingItemRequestActivityType
  files                Json?
  isDisabled           Boolean?                       @default(false)
  isDeleted            Boolean?                       @default(false)
  createdDate          DateTime                       @default(now())
  updatedDate          DateTime                       @updatedAt
  createdBy            String
  updatedBy            String

  @@index(fields: [rentingItemRequestId], name: "renting_request_id_index")
}

// Log Systems
model SearchKeyword {
  keyword     String   @id
  searchCount Int?     @default(0)
  isVerified  Boolean? @default(false)
}

model UserLoginLog {
  id           String   @id @default(uuid())
  ownerUserId  String
  ipAddress    String
  signedInDate DateTime @default(now())

  @@index(fields: [ownerUserId], name: "login_log_owner_user_index")
}

enum UserNotificationType {
  RentingRequestIsCreated
  RentingRequestIsDeclined
  RentingRequestIsApproved
  RentingRequestIsInProgress
  RentingRequestIsCompleted
  RentingRequestIsCancelled
}

model UserNotification {
  id          String               @id @default(uuid())
  forUser     User                 @relation("ForUserNotification", fields: [forUserId], references: [id])
  forUserId   String
  data        Json?
  type        UserNotificationType
  isRead      Boolean?             @default(false)
  createdDate DateTime             @default(now())

  @@index(fields: [createdDate], name: "user_notification_index")
  @@index(fields: [forUserId], name: "notification_for_user_index")
}

model WishingItem {
  ownerUserId String
  item        Item     @relation(fields: [itemId], references: [id])
  itemId      String
  createdDate DateTime @default(now())

  @@id([ownerUserId, itemId])
}

model MyUserContact {
  ownerUserId String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdDate DateTime @default(now())

  @@id([ownerUserId, userId])
}

//
// const notification1 = await photon.notifications.create({
//     data: {
//       mode: "email",
//     deliveryDate: new Date(),
//   destinationUserIDList: {
//     set: ["123", "456"]  -------> Array using set keyword
// },
// status: "pending",
// payload: '{"hello":"world"}'
// }
// });
//
// https://github.com/prisma/prisma/issues/3475 -> contain in array
model ChatConversation {
  id          String   @id @default(uuid())
  createdDate DateTime @default(now())

  createdBy String

  chatMessages            ChatMessage[]
  chatConversationMembers ChatConversationMember[]
}

model ChatConversationMember {
  chatConversation   ChatConversation @relation(fields: [chatConversationId], references: [id])
  chatConversationId String
  userId             String

  @@id([chatConversationId, userId])
}

// https://www.prisma.io/docs/concepts/components/prisma-schema/relations#self-relations
// https://dba.stackexchange.com/questions/97963/how-to-build-a-table-for-a-private-messaging-system-that-supports-replies/167579#167579
model ChatMessage {
  id      String @id @default(uuid())
  content String

  replyBy   ChatMessage? @relation("ChatMessageReplyRelation")
  replyToId String?
  replyTo   ChatMessage? @relation("ChatMessageReplyRelation", fields: [replyToId], references: [id])

  chatConversation   ChatConversation @relation(fields: [chatConversationId], references: [id])
  chatConversationId String

  fromUserId String
  isRead     Boolean? @default(false)

  createdDate DateTime @default(now())

  @@index(fields: [replyToId, id], name: "user_chat_message_index")
}

enum RentingOrderSystemStatusType {
  New
  Reserved
  PickedUp
  Returned
  Cancelled
}

model RentingOrder {
  id             String       @id @default(uuid())
  orderCustomId  String?
  org            Organization @relation("RentingOrderBelongToOrg", fields: [orgId], references: [id])
  orgId          String
  payAmount      Int?         @default(0)
  totalAmount    Int?         @default(0)
  note           String?
  customerUser   User         @relation("RentingOrderBelongToCustomer", fields: [customerUserId], references: [id])
  customerUserId String
  createdDate    DateTime     @default(now())
  updatedDate    DateTime     @updatedAt
  createdBy      String
  updatedBy      String

  systemStatus  RentingOrderSystemStatusType
  status        String
  attachedFiles Json?

  isDeleted Boolean? @default(false)

  rentingOrderItems   RentingOrderItem[]   @relation("RentingOrderItemBelongToRentingOrder")
  rentingDepositItems RentingDepositItem[] @relation("RentingDepositItemBelongToRentingOrder")

  orgRentingOrderTransactionHistories OrgRentingOrderTransactionHistory[] @relation("OrgRentingOrderTransactionBelongToRentingOrder")
  rentingOrderOrgActivityLogs         RentingOrderOrgActivityLog[]        @relation("RentingOrderOrgActivityLogBelongToRentingOrder")

  @@index(fields: [orgId, status], name: "selling_order_status_index")
}

model RentingOrderItem {
  id   String  @id @default(uuid())
  sku  String?
  name String
  note String?

  amount            Int?                         @default(0)
  quantity          Int?                         @default(0)
  pickupDateTime    DateTime?
  returningDateTime DateTime?
  systemStatus      RentingOrderSystemStatusType
  status            String
  unitPrice         Int?                         @default(0)
  unitPricePerDay   Int?                         @default(0)
  unitPricePerWeek  Int?                         @default(0)
  unitPricePerMonth Int?                         @default(0)
  attachedFiles     Json?

  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  createdBy   String
  updatedBy   String

  isDeleted Boolean? @default(false)

  item                                    Item?                                   @relation("RentingOrderItemBelongToItem", fields: [itemId], references: [id])
  itemId                                  String?
  org                                     Organization                            @relation("RentingOrderItemBelongToOrg", fields: [orgId], references: [id])
  orgId                                   String
  rentingOrder                            RentingOrder                            @relation("RentingOrderItemBelongToRentingOrder", fields: [rentingOrderId], references: [id])
  rentingOrderId                          String
  customerUser                            User                                    @relation("RentingOrderItemBelongToCustomer", fields: [customerUserId], references: [id])
  customerUserId                          String
  order                                   Int?                                    @default(0)
  orgRentingOrderItemTransactionHistories OrgRentingOrderItemTransactionHistory[] @relation("OrgRentingOrderItemTransactionBelongToRentingOrderItem")
}

enum RentingDepositItemSystemStatusType {
  New
  PickedUp
  Returned
}

enum RentingDepositItemSystemType {
  Money
  Document
  Item
  Other
}

model RentingDepositItem {
  id            String                             @id @default(uuid())
  type          String
  systemType    RentingDepositItemSystemType
  note          String?
  valueAmount   Int?                               @default(0)
  attachedFiles Json?
  systemStatus  RentingDepositItemSystemStatusType
  status        String

  rentingOrder   RentingOrder @relation("RentingDepositItemBelongToRentingOrder", fields: [rentingOrderId], references: [id])
  rentingOrderId String
  org            Organization @relation("RentingDepositItemBelongToOrg", fields: [orgId], references: [id])
  orgId          String
  customerUser   User         @relation("RentingDepositItemBelongToCustomer", fields: [customerUserId], references: [id])
  customerUserId String
  order          Int?         @default(0)

  createdBy String
  updatedBy String

  isDeleted Boolean? @default(false)
}

enum CommonAttributesType {
  RentingOrderStatus
  RentingOrderItemStatus
  RentingDepositItemStatus
  RentingDepositItemType
  PaymentMethod
}

enum PaymentMethodSystemType {
  PromoCode
  RewardPoints
  BankTransfer
  Card
  Cash
  MobileMoney
  Other
}

enum TransactionType {
  Pay
  Refund
}

model OrgTransactionHistory {
  id    String       @id @default(uuid())
  org   Organization @relation("OrgTransactionHistoryBelongToOrg", fields: [orgId], references: [id])
  orgId String

  refundToTransactionId String?

  payAmount     Int?    @default(0)
  refId         String? // Back Transfer code/ id. Payment Id,...
  note          String?
  attachedFiles Json?

  systemMethod PaymentMethodSystemType
  method       String

  type TransactionType

  createdDate DateTime @default(now())

  // The User of Staff create Transaction
  createdByUser User?   @relation("OrgTransactionHistoryCreatedByUser", fields: [createdBy], references: [id])
  createdBy     String?

  // The User Pay for Org
  transactionOwnerUser User?   @relation("OrgTransactionHistoryOwnerUser", fields: [transactionOwner], references: [id])
  transactionOwner     String?

  orgRentingOrderItemTransactionHistory OrgRentingOrderItemTransactionHistory? @relation("OrgRentingOrderItemTransactionHistoryBelongToOrgTransactionHistory")
  orgRentingOrderTransactionHistory     OrgRentingOrderTransactionHistory?     @relation("OrgRentingOrderTransactionHistoryBelongToOrgTransactionHistory")

  @@index(fields: [refId], name: "org_transaction_ref_id_index")
  @@index(fields: [refundToTransactionId], name: "org_transaction_refund_to_transaction_id_index")
}

model OrgRentingOrderItemTransactionHistory {
  orgTransactionHistory   OrgTransactionHistory? @relation("OrgRentingOrderItemTransactionHistoryBelongToOrgTransactionHistory", fields: [orgTransactionHistoryId], references: [id])
  orgTransactionHistoryId String                 @id

  rentingOrderItem   RentingOrderItem @relation("OrgRentingOrderItemTransactionBelongToRentingOrderItem", fields: [rentingOrderItemId], references: [id])
  rentingOrderItemId String

  item   Item?   @relation("OrgRentingOrderItemTransactionBelongToItem", fields: [itemId], references: [id])
  itemId String?

  type String?

  @@index(fields: [type], name: "org_renting_order_item_transaction_history_type")
}

model OrgRentingOrderTransactionHistory {
  orgTransactionHistory   OrgTransactionHistory? @relation("OrgRentingOrderTransactionHistoryBelongToOrgTransactionHistory", fields: [orgTransactionHistoryId], references: [id])
  orgTransactionHistoryId String                 @id

  rentingOrder   RentingOrder @relation("OrgRentingOrderTransactionBelongToRentingOrder", fields: [rentingOrderId], references: [id])
  rentingOrderId String

  type String?

  @@index(fields: [type], name: "org_renting_order_transaction_history_type")
}

model OrgActivityLog {
  id String @id @default(uuid())

  org   Organization @relation("OrgActivityLogBelongToOrg", fields: [orgId], references: [id])
  orgId String

  type String

  data Json?

  createdDate DateTime @default(now())

  createdByUser User?  @relation("OrgActivityLogCreatedByUser", fields: [createdBy], references: [id])
  createdBy     String

  rentingOrderOrgActivityLog RentingOrderOrgActivityLog? @relation("RentingOrderActivityLogBelongToOrgActivityLog")
  itemOrgActivityLog         ItemOrgActivityLog?         @relation("ItemActivityLogBelongToOrgActivityLog")
  customerOrgActivityLog     CustomerOrgActivityLog?     @relation("CustomerActivityLogBelongToOrgActivityLog")
  employeeOrgActivityLog     EmployeeOrgActivityLog?     @relation("EmployeeActivityLogBelongToOrgActivityLog")
}

model RentingOrderOrgActivityLog {
  orgActivityLog   OrgActivityLog? @relation("RentingOrderActivityLogBelongToOrgActivityLog", fields: [orgActivityLogId], references: [id])
  orgActivityLogId String          @id

  rentingOrder   RentingOrder @relation("RentingOrderOrgActivityLogBelongToRentingOrder", fields: [rentingOrderId], references: [id])
  rentingOrderId String
}

model ItemOrgActivityLog {
  orgActivityLog   OrgActivityLog? @relation("ItemActivityLogBelongToOrgActivityLog", fields: [orgActivityLogId], references: [id])
  orgActivityLogId String          @id

  item   Item   @relation("ItemOrgActivityLogBelongToItem", fields: [itemId], references: [id])
  itemId String
}

model CustomerOrgActivityLog {
  orgActivityLog   OrgActivityLog? @relation("CustomerActivityLogBelongToOrgActivityLog", fields: [orgActivityLogId], references: [id])
  orgActivityLogId String          @id

  customer   Customer @relation("CustomerOrgActivityLogBelongToCustomer", fields: [customerId], references: [id])
  customerId String
}

model EmployeeOrgActivityLog {
  orgActivityLog   OrgActivityLog? @relation("EmployeeActivityLogBelongToOrgActivityLog", fields: [orgActivityLogId], references: [id])
  orgActivityLogId String          @id

  employee   Employee @relation("EmployeeOrgActivityLogBelongToEmployee", fields: [employeeId], references: [id])
  employeeId String
}

model CommonAttributesConfig {
  description          String?
  value                String // Value khong duoc thay doi, sau khi da tao
  parentAttributeValue String? // Dung cho truong hop status, status con di theo sau 1 status khac New -> InProgress
  label                String
  type                 CommonAttributesType
  customConfigs        Json?
  mapWithSystemValue   String?
  isDisabled           Boolean?             @default(false)
  isDefault            Boolean?             @default(false)
  order                Int?                 @default(0)
  org                  Organization         @relation("CommonAttributesConfigBelongToOrg", fields: [orgId], references: [id])
  orgId                String
  createdDate          DateTime             @default(now())
  updatedDate          DateTime             @updatedAt

  createdBy String
  updatedBy String

  @@id([orgId, type, value])
  @@index(fields: [orgId, type], name: "common_attributes_org_type_index")
  @@index(fields: [orgId, parentAttributeValue], name: "common_attributes_org_parent_attribute_index")
  @@index(fields: [orgId, mapWithSystemValue], name: "common_attributes_map_system_value_index")
}

model OrgCategory {
  id               String       @id @default(uuid())
  name             String
  slug             String
  image            Json?
  coverImage       Json?
  parentCategoryId String?
  order            Int?         @default(0)
  isDisabled       Boolean?     @default(false)
  items            Item[]       @relation(references: [id])
  seoTitle         String?
  seoDescription   String?
  org              Organization @relation("OrgCategoryBelongToOrg", fields: [orgId], references: [id])
  orgId            String
  category         Category?    @relation("OrgCategoryBelongToCategory", fields: [categoryId], references: [id])
  categoryId       String?

  createdBy String
  updatedBy String

  orgDailyCategoryStatistics OrgDailyCategoryStatistics[] @relation("OrgDailyCategoryStatisticsBelongToOrgCategory")

  @@unique([orgId, slug])
}

model OrgDailyOrderStatistics {
  entryDateTime DateTime

  org   Organization @relation("OrgDailyOrderStatisticsBelongToOrg", fields: [orgId], references: [id])
  orgId String

  rentingOrderAmount          Int? @default(0) // After Approved
  rentingOrderPayAmount       Int? @default(0) // After Approved
  rentingOrderRefundAmount    Int? @default(0) // After Approved
  rentingNewOrderCount        Int? @default(0)
  rentingReservedOrderCount   Int? @default(0)
  rentingPickedUpOrderCount   Int? @default(0)
  rentingReturnedUpOrderCount Int? @default(0)
  rentingCancelledOrderCount  Int? @default(0)

  @@id([orgId, entryDateTime])
}

model OrgDailyCategoryStatistics {
  entryDateTime DateTime

  org   Organization @relation("OrgDailyCategoryStatisticsBelongToOrg", fields: [orgId], references: [id])
  orgId String

  orgCategory   OrgCategory @relation("OrgDailyCategoryStatisticsBelongToOrgCategory", fields: [orgCategoryId], references: [id])
  orgCategoryId String

  newRentingOrderCount       Int? @default(0)
  cancelledRentingOrderCount Int? @default(0)
  viewCount                  Int? @default(0)
  amount                     Int? @default(0)

  @@id([orgId, entryDateTime, orgCategoryId])
}

model OrgDailyItemStatistics {
  entryDateTime DateTime

  org   Organization @relation("OrgDailyItemStatisticsBelongToOrg", fields: [orgId], references: [id])
  orgId String

  item   Item   @relation("OrgDailyItemStatisticsBelongToItem", fields: [itemId], references: [id])
  itemId String

  newRentingOrderCount       Int? @default(0)
  cancelledRentingOrderCount Int? @default(0)
  viewCount                  Int? @default(0)
  amount                     Int? @default(0) // Amount after Approved
  payDamagesAmount           Int? @default(0)
  refundDamagesAmount        Int? @default(0)

  @@id([orgId, entryDateTime, itemId])
}

// In Second 0 -> 0hr
// In Second 900 -> 0 hr 15 min
model OrgDailyCustomerTradeTrackingCountStatistics {
  entryDateTime DateTime

  org   Organization @relation("OrgDailyCustomerTradeTrackingCountStatisticsBelongToOrg", fields: [orgId], references: [id])
  orgId String

  customerCount Int? @default(0)

  @@id([orgId, entryDateTime])
}

model OrgDailyCustomerStatistics {
  entryDateTime DateTime

  org   Organization @relation("OrgDailyCustomerStatisticsBelongToOrg", fields: [orgId], references: [id])
  orgId String

  newCount Int? @default(0)
  returnCount Int? @default(0)

  @@id([orgId, entryDateTime])
}


// Item Reviews?
// Renting Request Comments? with attach files
// Cho phep khoa comment, do chu shop khoa, thi comment ko the chinh sua hoac xoa nua
// Renting Request Review

// Log Search Keywork
// Log User Signed In
// Log user sharing

// Trust User?
