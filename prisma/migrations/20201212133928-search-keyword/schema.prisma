// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  Admin
  User
}

model User {
  id            String      @id @default(uuid())
  email         String?      @unique
  passwordHash  String?
  currentHashedRefreshToken String? @unique
  role          UserRole[]
  facebookId    String?      @unique
  facebookAccessToken String?
  googleId      String?     @unique
  googleAccessToken String?
  isEmailVerified   Boolean  @default(false)
}

model UserInfo {
  id            String      @id
  displayName          String?
  bio           String?
  avatarImage   String? // { id, url }
  coverImage    String? // { id, url }
  createdDate       DateTime      @default(now())
}

enum UserVerifyDocumentType {
  Facebook
  Email
  PhoneNumber
}

model UserIdentifyDocument {
  id            String      @id @default(uuid())
  userId        String
  type          UserVerifyDocumentType
  value         String
  isVerfied     Boolean?
}

model Area {
  id            String      @id @default(uuid())
  region        String
  name          String
  slug          String      @unique
  parentAreaId  String?
  latitude      Float
  longitude     Float
  order         Int?        @default(0)
  isDefault         Boolean?    @default(false)
  isDisabled    Boolean?    @default(false)
  isDeleted     Boolean?    @default(false)
  items         Item[]      @relation(references: [id])
}

model Category {
  id                String      @id @default(uuid())
  name              String
  slug              String      @unique
  imageUrl          String?
  coverImageUrl     String?
  parentCategoryId  String?
  order             Int?        @default(0)
  isDefault         Boolean?    @default(false)
  isDisabled        Boolean?    @default(false)
  isDeleted         Boolean?    @default(false)
  items             Item[]      @relation(references: [id])
  isFeatured        Boolean?    @default(false)
}

enum FileUsingLocate {
  ItemPreviewImage
  UserAvatarImage
  UserCoverImage
}

model FileStorage {
  id                String        @id @default(uuid())
  url               String
  name              String
  bucketName        String
  folderName        String
  contentType       String
  usingLocate       FileUsingLocate?
  isUploadSuccess   Boolean?      @default(false)
  createdBy         String
  createdDate       DateTime      @default(now())
  isDeleted         Boolean?      @default(false)

  @@index(fields: [bucketName, folderName], name: "file_storage_main_index")
}

enum ItemStatus {
  Draft
  Blocked
  Published
}

// areas, FE will use the last area, it's smallest unit
model Item {
  id                      String          @id @default(uuid())
  name                    String
  slug                    String          @unique
  description             String?
  categories              Category[]      @relation(references: [id])
  areas                   Area[]          @relation(references: [id])
  rentingItemRequests                   RentingItemRequest[]
  images                  String?
  checkBeforeRentDocuments         String?
  keepWhileRentingDocuments        String?
  unavailableForRentDays  DateTime[]
  currentOriginalPrice    Float?
  sellPrice               Float?
  rentPricePerDay         Float?
  rentPricePerWeek        Float?
  rentPricePerMonth       Float?
  currencyCode            String?
  summaryReviewCore       Float?
  summaryReviewCount      Float?
  totalQuantity             Int             @default(1)
  isVerified              Boolean?        @default(false)
  status                  ItemStatus
  note                    String?
  ownerUserId             String
  isDeleted               Boolean?        @default(false)
  createdDate             DateTime        @default(now())
  updatedDate             DateTime        @default(now())
  updatedBy               String
  keyword                 String?

  @@index(fields: [slug, keyword, status, ownerUserId, isDeleted], name: "item_main_index")
}

enum RentingMandatoryVerifyDocumentDataType {
  Label
  Currency
}

// tien coc, bang lai xe, 
model RentingMandatoryVerifyDocument {
  id                      String          @id @default(uuid())
  name                    String
  dataType                RentingMandatoryVerifyDocumentDataType
}

enum RentingItemRequestStatus {
  New
  Declined
  Approved
  InProgress
  Completed
  Cancelled
}

model RentingItemRequest {
  id                      String          @id @default(uuid())
  rentingItem           Item @relation(fields: [itemId], references: [id])
  itemId                String
  rentingItemCachedInfo       String
  totalAmount             Float?           @default(0)
  actualTotalAmount            Float?           @default(0)
  rentTotalQuantity       Int?             @default(1)
  fromDate                DateTime
  toDate                  DateTime
  status                  RentingItemRequestStatus?
  ownerUserId             String
  lenderUserId            String
  isDeleted               Boolean?        @default(false)
  createdDate             DateTime        @default(now())
  updatedDate             DateTime        @default(now())
  updatedBy               String

  @@index(fields: [itemId, ownerUserId, lenderUserId, isDeleted], name: "renting_item_request_main_index")
}

model ItemReview {
  id                      String          @id @default(uuid())
  rentingItem           Item @relation(fields: [itemId], references: [id])
  rentingRequestId      String?
  itemId                String
  reviewScore           Int
  reviewComment         String?
  images                  String?
  ownerUserId             String
  isDeleted               Boolean?        @default(false)
  createdDate             DateTime        @default(now())
  updatedDate             DateTime        @default(now())
  updatedBy               String
}

model UserReview {
  id                      String          @id @default(uuid())
  toUserId              String
  rentingRequestId      String?
  reviewScore           Int
  reviewComment         String?
  ownerUserId             String
  isDeleted               Boolean?        @default(false)
  createdDate             DateTime        @default(now())
  updatedDate             DateTime        @default(now())
  updatedBy               String
}

enum RentingItemRequestActivityType {
  Comment
  Declined
  Approved
  InProgress
  Completed
  Cancelled
}

model RentingItemRequestActivity {
  id                      String          @id @default(uuid())
  rentingItemRequest           RentingItemRequest @relation(fields: [rentingItemRequestId], references: [id])
  rentingItemRequestId                String
  comment             String?
  type              RentingItemRequestActivityType
  files                 String? // JSON
  isDisabled              Boolean?        @default(false)
  isDeleted               Boolean?        @default(false)
  createdDate             DateTime        @default(now())
  updatedDate             DateTime        @default(now())
  createdBy               String
  updatedBy               String
}

// Log Systems
model SearchKeyword {
  keyword             String @id
  count               Int?  @default(0)
}

model UserLoginLog {
   id                      String          @id @default(uuid())
   ownerUserId             String
   ipAddress               String
   signedInDate             DateTime        @default(now())
}

enum UserNotificationType {
  NewRequestRenting
  RequestRentingIsApproved
  NewCommentInRequestRenting
}

model UserNotification {
  id      String          @id @default(uuid())
  forUserId             String
  title             String
  content             String
  images            String? // JSON
  type              UserNotificationType
  isRead          Boolean?        @default(false)
}

model WishingItem {
  id      String          @id @default(uuid())
  ownerUserId             String
  item           Item @relation(fields: [itemId], references: [id])
  itemId          String
  createdDate             DateTime        @default(now())

  @@index(fields: [ownerUserId], name: "wishing_item_main_index")
}

model MyUserContact {
  id      String          @id @default(uuid())
  ownerUserId             String
  user           User @relation(fields: [userId], references: [id])
  userId                  String
  createdDate             DateTime        @default(now())

  @@index(fields: [ownerUserId], name: "my_user_contact_main_index")
}

// Item Reviews?
// Renting Request Comments? with attach files
// Cho phep khoa comment, do chu shop khoa, thi comment ko the chinh sua hoac xoa nua
// Renting Request Review

// Log Search Keywork
// Log User Signed In
// Item Yeu Thich
// Luu danh ba nguoi cho thue
// User Notifications
// Log user sharing

// Trust User?